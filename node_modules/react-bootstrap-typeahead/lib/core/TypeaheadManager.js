"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _usePrevious = _interopRequireDefault(require("@restart/hooks/usePrevious"));

var _Context = require("./Context");

var _utils = require("../utils");

var _constants = require("../constants");

var inputPropKeys = ['activeIndex', 'disabled', 'id', 'inputRef', 'isFocused', 'isMenuShown', 'multiple', 'onBlur', 'onChange', 'onFocus', 'onKeyDown', 'placeholder'];
var propKeys = ['activeIndex', 'hideMenu', 'isMenuShown', 'labelKey', 'onClear', 'onHide', 'onRemove', 'results', 'selected', 'text', 'toggleMenu'];
var contextKeys = ['activeIndex', 'id', 'initialItem', 'inputNode', 'onActiveItemChange', 'onAdd', 'onInitialItemChange', 'onMenuItemClick', 'selectHintOnEnter', 'setItem'];

var TypeaheadManager = function TypeaheadManager(props) {
  var allowNew = props.allowNew,
      children = props.children,
      initialItem = props.initialItem,
      isMenuShown = props.isMenuShown,
      onAdd = props.onAdd,
      onInitialItemChange = props.onInitialItemChange,
      onKeyDown = props.onKeyDown,
      onMenuToggle = props.onMenuToggle,
      results = props.results;
  var prevProps = (0, _usePrevious["default"])(props);
  (0, _react.useEffect)(function () {
    // Clear the initial item when there are no results.
    if (!(allowNew || results.length)) {
      onInitialItemChange(null);
    }
  });
  (0, _react.useEffect)(function () {
    if (prevProps && prevProps.isMenuShown !== isMenuShown) {
      onMenuToggle(isMenuShown);
    }
  });

  var handleKeyDown = function handleKeyDown(e) {
    switch (e.keyCode) {
      case _constants.RETURN:
        if (initialItem && (0, _utils.getIsOnlyResult)(props)) {
          onAdd(initialItem);
        }

        break;

      default:
        break;
    }

    onKeyDown(e);
  };

  var childProps = (0, _extends2["default"])({}, (0, _utils.pick)(props, propKeys), {
    getInputProps: (0, _utils.getInputProps)((0, _extends2["default"])({}, (0, _utils.pick)(props, inputPropKeys), {
      onKeyDown: handleKeyDown,
      value: (0, _utils.getInputText)(props)
    }))
  });
  var contextValue = (0, _extends2["default"])({}, (0, _utils.pick)(props, contextKeys), {
    hintText: (0, _utils.getHintText)(props),
    isOnlyResult: (0, _utils.getIsOnlyResult)(props)
  });
  return /*#__PURE__*/_react["default"].createElement(_Context.TypeaheadContext.Provider, {
    value: contextValue
  }, children(childProps));
};

var _default = TypeaheadManager;
exports["default"] = _default;