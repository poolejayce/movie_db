{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Children } from 'react';\nimport { BaseMenuItem } from './MenuItem';\nimport { preventInputBlur } from '../utils';\nimport { checkPropType, isRequiredForA11y } from '../propTypes';\n\nvar MenuDivider = function MenuDivider(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-divider\",\n    role: \"separator\"\n  });\n};\n\nvar MenuHeader = function MenuHeader(props) {\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n    React.createElement(\"div\", _extends({}, props, {\n      className: \"dropdown-header\",\n      role: \"heading\"\n    }))\n  );\n};\n\nvar propTypes = {\n  'aria-label': PropTypes.string,\n\n  /**\n   * Message to display in the menu if there are no valid results.\n   */\n  emptyLabel: PropTypes.node,\n\n  /**\n   * Needed for accessibility.\n   */\n  id: checkPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), isRequiredForA11y),\n\n  /**\n   * Maximum height of the dropdown menu.\n   */\n  maxHeight: PropTypes.string\n};\nvar defaultProps = {\n  'aria-label': 'menu-options',\n  emptyLabel: 'No matches found.',\n  maxHeight: '300px'\n};\n/**\n * Menu component that handles empty state when passed a set of results.\n */\n\nvar Menu = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Menu, _React$Component);\n\n  function Menu() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Menu.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props = this.props,\n        inputHeight = _this$props.inputHeight,\n        scheduleUpdate = _this$props.scheduleUpdate; // Update the menu position if the height of the input changes.\n\n    if (inputHeight !== prevProps.inputHeight) {\n      scheduleUpdate();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        emptyLabel = _this$props2.emptyLabel,\n        id = _this$props2.id,\n        innerRef = _this$props2.innerRef,\n        maxHeight = _this$props2.maxHeight,\n        style = _this$props2.style,\n        text = _this$props2.text;\n    var contents = Children.count(children) === 0 ? /*#__PURE__*/React.createElement(BaseMenuItem, {\n      disabled: true,\n      role: \"option\"\n    }, emptyLabel) : children;\n    return (\n      /*#__PURE__*/\n\n      /* eslint-disable jsx-a11y/interactive-supports-focus */\n      React.createElement(\"div\", {\n        \"aria-label\": this.props['aria-label'],\n        className: cx('rbt-menu', 'dropdown-menu', 'show', className),\n        id: id,\n        key: // Force a re-render if the text changes to ensure that menu\n        // positioning updates correctly.\n        text,\n        onMouseDown: // Prevent input from blurring when clicking on the menu scrollbar.\n        preventInputBlur,\n        ref: innerRef,\n        role: \"listbox\",\n        style: _extends({}, style, {\n          display: 'block',\n          maxHeight: maxHeight,\n          overflow: 'auto'\n        })\n      }, contents)\n      /* eslint-enable jsx-a11y/interactive-supports-focus */\n\n    );\n  };\n\n  return Menu;\n}(React.Component);\n\n_defineProperty(Menu, \"propTypes\", propTypes);\n\n_defineProperty(Menu, \"defaultProps\", defaultProps);\n\n_defineProperty(Menu, \"Divider\", MenuDivider);\n\n_defineProperty(Menu, \"Header\", MenuHeader);\n\nexport default Menu;","map":{"version":3,"sources":["C:/Users/jayce/Documents/movie_db/movie_db/node_modules/react-bootstrap-typeahead/es/components/Menu.js"],"names":["_inheritsLoose","_defineProperty","_extends","cx","PropTypes","React","Children","BaseMenuItem","preventInputBlur","checkPropType","isRequiredForA11y","MenuDivider","props","createElement","className","role","MenuHeader","propTypes","string","emptyLabel","node","id","oneOfType","number","maxHeight","defaultProps","Menu","_React$Component","apply","arguments","_proto","prototype","componentDidUpdate","prevProps","_this$props","inputHeight","scheduleUpdate","render","_this$props2","children","innerRef","style","text","contents","count","disabled","key","onMouseDown","ref","display","overflow","Component"],"mappings":"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","sourcesContent":["import _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Children } from 'react';\nimport { BaseMenuItem } from './MenuItem';\nimport { preventInputBlur } from '../utils';\nimport { checkPropType, isRequiredForA11y } from '../propTypes';\n\nvar MenuDivider = function MenuDivider(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-divider\",\n    role: \"separator\"\n  });\n};\n\nvar MenuHeader = function MenuHeader(props) {\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n    React.createElement(\"div\", _extends({}, props, {\n      className: \"dropdown-header\",\n      role: \"heading\"\n    }))\n  );\n};\n\nvar propTypes = {\n  'aria-label': PropTypes.string,\n\n  /**\n   * Message to display in the menu if there are no valid results.\n   */\n  emptyLabel: PropTypes.node,\n\n  /**\n   * Needed for accessibility.\n   */\n  id: checkPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), isRequiredForA11y),\n\n  /**\n   * Maximum height of the dropdown menu.\n   */\n  maxHeight: PropTypes.string\n};\nvar defaultProps = {\n  'aria-label': 'menu-options',\n  emptyLabel: 'No matches found.',\n  maxHeight: '300px'\n};\n\n/**\n * Menu component that handles empty state when passed a set of results.\n */\nvar Menu = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Menu, _React$Component);\n\n  function Menu() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Menu.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props = this.props,\n        inputHeight = _this$props.inputHeight,\n        scheduleUpdate = _this$props.scheduleUpdate; // Update the menu position if the height of the input changes.\n\n    if (inputHeight !== prevProps.inputHeight) {\n      scheduleUpdate();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        emptyLabel = _this$props2.emptyLabel,\n        id = _this$props2.id,\n        innerRef = _this$props2.innerRef,\n        maxHeight = _this$props2.maxHeight,\n        style = _this$props2.style,\n        text = _this$props2.text;\n    var contents = Children.count(children) === 0 ? /*#__PURE__*/React.createElement(BaseMenuItem, {\n      disabled: true,\n      role: \"option\"\n    }, emptyLabel) : children;\n    return (\n      /*#__PURE__*/\n\n      /* eslint-disable jsx-a11y/interactive-supports-focus */\n      React.createElement(\"div\", {\n        \"aria-label\": this.props['aria-label'],\n        className: cx('rbt-menu', 'dropdown-menu', 'show', className),\n        id: id,\n        key: // Force a re-render if the text changes to ensure that menu\n        // positioning updates correctly.\n        text,\n        onMouseDown: // Prevent input from blurring when clicking on the menu scrollbar.\n        preventInputBlur,\n        ref: innerRef,\n        role: \"listbox\",\n        style: _extends({}, style, {\n          display: 'block',\n          maxHeight: maxHeight,\n          overflow: 'auto'\n        })\n      }, contents)\n      /* eslint-enable jsx-a11y/interactive-supports-focus */\n\n    );\n  };\n\n  return Menu;\n}(React.Component);\n\n_defineProperty(Menu, \"propTypes\", propTypes);\n\n_defineProperty(Menu, \"defaultProps\", defaultProps);\n\n_defineProperty(Menu, \"Divider\", MenuDivider);\n\n_defineProperty(Menu, \"Header\", MenuHeader);\n\nexport default Menu;"]},"metadata":{},"sourceType":"module"}