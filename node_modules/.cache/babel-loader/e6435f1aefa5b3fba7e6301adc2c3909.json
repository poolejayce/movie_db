{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useCallback, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport Typeahead from '../core/Typeahead';\nimport { optionType } from '../propTypes';\nimport { getDisplayName, isFunction, warn } from '../utils';\nvar propTypes = {\n  /**\n   * Delay, in milliseconds, before performing search.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * Whether or not a request is currently pending. Necessary for the\n   * container to know when new results are available.\n   */\n  isLoading: PropTypes.bool.isRequired,\n\n  /**\n   * Number of input characters that must be entered before showing results.\n   */\n  minLength: PropTypes.number,\n\n  /**\n   * Callback to perform when the search is executed.\n   */\n  onSearch: PropTypes.func.isRequired,\n\n  /**\n   * Options to be passed to the typeahead. Will typically be the query\n   * results, but can also be initial default options.\n   */\n  options: PropTypes.arrayOf(optionType),\n\n  /**\n   * Message displayed in the menu when there is no user input.\n   */\n  promptText: PropTypes.node,\n\n  /**\n   * Message displayed in the menu while the request is pending.\n   */\n  searchText: PropTypes.node,\n\n  /**\n   * Whether or not the component should cache query results.\n   */\n  useCache: PropTypes.bool\n};\nvar defaultProps = {\n  delay: 200,\n  minLength: 2,\n  options: [],\n  promptText: 'Type to search...',\n  searchText: 'Searching...',\n  useCache: true\n};\n/**\n * Logic that encapsulates common behavior and functionality around\n * asynchronous searches, including:\n *\n *  - Debouncing user input\n *  - Optional query caching\n *  - Search prompt and empty results behaviors\n */\n\nexport function useAsync(props) {\n  var allowNew = props.allowNew,\n      delay = props.delay,\n      emptyLabel = props.emptyLabel,\n      isLoading = props.isLoading,\n      minLength = props.minLength,\n      onInputChange = props.onInputChange,\n      onSearch = props.onSearch,\n      options = props.options,\n      promptText = props.promptText,\n      searchText = props.searchText,\n      useCache = props.useCache,\n      otherProps = _objectWithoutPropertiesLoose(props, [\"allowNew\", \"delay\", \"emptyLabel\", \"isLoading\", \"minLength\", \"onInputChange\", \"onSearch\", \"options\", \"promptText\", \"searchText\", \"useCache\"]);\n\n  var cacheRef = useRef({});\n  var handleSearchDebouncedRef = useRef();\n  var queryRef = useRef(props.defaultInputValue || '');\n  var forceUpdate = useForceUpdate();\n  var prevProps = usePrevious(props);\n  var handleSearch = useCallback(function (query) {\n    queryRef.current = query;\n\n    if (!query || minLength && query.length < minLength) {\n      return;\n    } // Use cached results, if applicable.\n\n\n    if (useCache && cacheRef.current[query]) {\n      // Re-render the component with the cached results.\n      forceUpdate();\n      return;\n    } // Perform the search.\n\n\n    onSearch(query);\n  }, [forceUpdate, minLength, onSearch, useCache]); // Set the debounced search function.\n\n  useEffect(function () {\n    handleSearchDebouncedRef.current = debounce(handleSearch, delay);\n    return function () {\n      handleSearchDebouncedRef.current && handleSearchDebouncedRef.current.cancel();\n    };\n  }, [delay, handleSearch]);\n  useEffect(function () {\n    // Ensure that we've gone from a loading to a completed state. Otherwise\n    // an empty response could get cached if the component updates during the\n    // request (eg: if the parent re-renders for some reason).\n    if (!isLoading && prevProps && prevProps.isLoading && useCache) {\n      cacheRef.current[queryRef.current] = options;\n    }\n  });\n\n  var getEmptyLabel = function getEmptyLabel() {\n    if (!queryRef.current.length) {\n      return promptText;\n    }\n\n    if (isLoading) {\n      return searchText;\n    }\n\n    return emptyLabel;\n  };\n\n  var handleInputChange = useCallback(function (query, e) {\n    onInputChange && onInputChange(query, e);\n    handleSearchDebouncedRef.current && handleSearchDebouncedRef.current(query);\n  }, [onInputChange]);\n  var cachedQuery = cacheRef.current[queryRef.current];\n  return _extends({}, otherProps, {\n    // Disable custom selections during a search if `allowNew` isn't a function.\n    allowNew: isFunction(allowNew) ? allowNew : allowNew && !isLoading,\n    emptyLabel: getEmptyLabel(),\n    isLoading: isLoading,\n    minLength: minLength,\n    onInputChange: handleInputChange,\n    options: useCache && cachedQuery ? cachedQuery : options\n  });\n}\nexport function withAsync(Component) {\n  var AsyncTypeahead = /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, useAsync(props), {\n      ref: ref\n    }));\n  });\n  AsyncTypeahead.displayName = \"withAsync(\" + getDisplayName(Component) + \")\"; // $FlowFixMe\n\n  AsyncTypeahead.propTypes = propTypes; // $FlowFixMe\n\n  AsyncTypeahead.defaultProps = defaultProps;\n  return AsyncTypeahead;\n}\nexport default function asyncContainer(Component) {\n  /* istanbul ignore next */\n  warn(false, 'The `asyncContainer` export is deprecated; use `withAsync` instead.');\n  /* istanbul ignore next */\n\n  return withAsync(Component);\n}","map":{"version":3,"sources":["C:/Users/jayce/Documents/movie_db/movie_db/node_modules/react-bootstrap-typeahead/es/behaviors/async.js"],"names":["_extends","_objectWithoutPropertiesLoose","debounce","PropTypes","React","forwardRef","useCallback","useEffect","useRef","useForceUpdate","usePrevious","Typeahead","optionType","getDisplayName","isFunction","warn","propTypes","delay","number","isLoading","bool","isRequired","minLength","onSearch","func","options","arrayOf","promptText","node","searchText","useCache","defaultProps","useAsync","props","allowNew","emptyLabel","onInputChange","otherProps","cacheRef","handleSearchDebouncedRef","queryRef","defaultInputValue","forceUpdate","prevProps","handleSearch","query","current","length","cancel","getEmptyLabel","handleInputChange","e","cachedQuery","withAsync","Component","AsyncTypeahead","ref","createElement","displayName","asyncContainer"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useCallback, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport Typeahead from '../core/Typeahead';\nimport { optionType } from '../propTypes';\nimport { getDisplayName, isFunction, warn } from '../utils';\nvar propTypes = {\n  /**\n   * Delay, in milliseconds, before performing search.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * Whether or not a request is currently pending. Necessary for the\n   * container to know when new results are available.\n   */\n  isLoading: PropTypes.bool.isRequired,\n\n  /**\n   * Number of input characters that must be entered before showing results.\n   */\n  minLength: PropTypes.number,\n\n  /**\n   * Callback to perform when the search is executed.\n   */\n  onSearch: PropTypes.func.isRequired,\n\n  /**\n   * Options to be passed to the typeahead. Will typically be the query\n   * results, but can also be initial default options.\n   */\n  options: PropTypes.arrayOf(optionType),\n\n  /**\n   * Message displayed in the menu when there is no user input.\n   */\n  promptText: PropTypes.node,\n\n  /**\n   * Message displayed in the menu while the request is pending.\n   */\n  searchText: PropTypes.node,\n\n  /**\n   * Whether or not the component should cache query results.\n   */\n  useCache: PropTypes.bool\n};\nvar defaultProps = {\n  delay: 200,\n  minLength: 2,\n  options: [],\n  promptText: 'Type to search...',\n  searchText: 'Searching...',\n  useCache: true\n};\n\n/**\n * Logic that encapsulates common behavior and functionality around\n * asynchronous searches, including:\n *\n *  - Debouncing user input\n *  - Optional query caching\n *  - Search prompt and empty results behaviors\n */\nexport function useAsync(props) {\n  var allowNew = props.allowNew,\n      delay = props.delay,\n      emptyLabel = props.emptyLabel,\n      isLoading = props.isLoading,\n      minLength = props.minLength,\n      onInputChange = props.onInputChange,\n      onSearch = props.onSearch,\n      options = props.options,\n      promptText = props.promptText,\n      searchText = props.searchText,\n      useCache = props.useCache,\n      otherProps = _objectWithoutPropertiesLoose(props, [\"allowNew\", \"delay\", \"emptyLabel\", \"isLoading\", \"minLength\", \"onInputChange\", \"onSearch\", \"options\", \"promptText\", \"searchText\", \"useCache\"]);\n\n  var cacheRef = useRef({});\n  var handleSearchDebouncedRef = useRef();\n  var queryRef = useRef(props.defaultInputValue || '');\n  var forceUpdate = useForceUpdate();\n  var prevProps = usePrevious(props);\n  var handleSearch = useCallback(function (query) {\n    queryRef.current = query;\n\n    if (!query || minLength && query.length < minLength) {\n      return;\n    } // Use cached results, if applicable.\n\n\n    if (useCache && cacheRef.current[query]) {\n      // Re-render the component with the cached results.\n      forceUpdate();\n      return;\n    } // Perform the search.\n\n\n    onSearch(query);\n  }, [forceUpdate, minLength, onSearch, useCache]); // Set the debounced search function.\n\n  useEffect(function () {\n    handleSearchDebouncedRef.current = debounce(handleSearch, delay);\n    return function () {\n      handleSearchDebouncedRef.current && handleSearchDebouncedRef.current.cancel();\n    };\n  }, [delay, handleSearch]);\n  useEffect(function () {\n    // Ensure that we've gone from a loading to a completed state. Otherwise\n    // an empty response could get cached if the component updates during the\n    // request (eg: if the parent re-renders for some reason).\n    if (!isLoading && prevProps && prevProps.isLoading && useCache) {\n      cacheRef.current[queryRef.current] = options;\n    }\n  });\n\n  var getEmptyLabel = function getEmptyLabel() {\n    if (!queryRef.current.length) {\n      return promptText;\n    }\n\n    if (isLoading) {\n      return searchText;\n    }\n\n    return emptyLabel;\n  };\n\n  var handleInputChange = useCallback(function (query, e) {\n    onInputChange && onInputChange(query, e);\n    handleSearchDebouncedRef.current && handleSearchDebouncedRef.current(query);\n  }, [onInputChange]);\n  var cachedQuery = cacheRef.current[queryRef.current];\n  return _extends({}, otherProps, {\n    // Disable custom selections during a search if `allowNew` isn't a function.\n    allowNew: isFunction(allowNew) ? allowNew : allowNew && !isLoading,\n    emptyLabel: getEmptyLabel(),\n    isLoading: isLoading,\n    minLength: minLength,\n    onInputChange: handleInputChange,\n    options: useCache && cachedQuery ? cachedQuery : options\n  });\n}\nexport function withAsync(Component) {\n  var AsyncTypeahead = /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, useAsync(props), {\n      ref: ref\n    }));\n  });\n  AsyncTypeahead.displayName = \"withAsync(\" + getDisplayName(Component) + \")\"; // $FlowFixMe\n\n  AsyncTypeahead.propTypes = propTypes; // $FlowFixMe\n\n  AsyncTypeahead.defaultProps = defaultProps;\n  return AsyncTypeahead;\n}\nexport default function asyncContainer(Component) {\n  /* istanbul ignore next */\n  warn(false, 'The `asyncContainer` export is deprecated; use `withAsync` instead.');\n  /* istanbul ignore next */\n\n  return withAsync(Component);\n}"]},"metadata":{},"sourceType":"module"}