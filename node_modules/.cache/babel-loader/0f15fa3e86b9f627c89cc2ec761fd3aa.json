{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { isFunction, values, warn } from './utils';\nimport { SIZE } from './constants';\nvar INPUT_PROPS_BLACKLIST = [{\n  alt: 'onBlur',\n  prop: 'onBlur'\n}, {\n  alt: 'onInputChange',\n  prop: 'onChange'\n}, {\n  alt: 'onFocus',\n  prop: 'onFocus'\n}, {\n  alt: 'onKeyDown',\n  prop: 'onKeyDown'\n}];\nexport var sizeType = PropTypes.oneOf(values(SIZE));\n/**\n * Allows additional warnings or messaging related to prop validation.\n */\n\nexport function checkPropType(validator, callback) {\n  return function (props, propName, componentName) {\n    var _PropTypes$checkPropT;\n\n    PropTypes.checkPropTypes((_PropTypes$checkPropT = {}, _PropTypes$checkPropT[propName] = validator, _PropTypes$checkPropT), props, 'prop', componentName);\n    isFunction(callback) && callback(props, propName, componentName);\n  };\n}\nexport function caseSensitiveType(props, propName, componentName) {\n  var caseSensitive = props.caseSensitive,\n      filterBy = props.filterBy;\n  warn(!caseSensitive || typeof filterBy !== 'function', 'Your `filterBy` function will override the `caseSensitive` prop.');\n}\nexport function deprecated(validator, reason) {\n  return function (props, propName, componentName) {\n    var _PropTypes$checkPropT2;\n\n    if (props[propName] != null) {\n      warn(false, \"The `\" + propName + \"` prop is deprecated. \" + reason);\n    }\n\n    return PropTypes.checkPropTypes((_PropTypes$checkPropT2 = {}, _PropTypes$checkPropT2[propName] = validator, _PropTypes$checkPropT2), props, 'prop', componentName);\n  };\n}\nexport function defaultInputValueType(props, propName, componentName) {\n  var defaultInputValue = props.defaultInputValue,\n      defaultSelected = props.defaultSelected,\n      multiple = props.multiple,\n      selected = props.selected;\n  var name = defaultSelected.length ? 'defaultSelected' : 'selected';\n  warn(!(!multiple && defaultInputValue && (defaultSelected.length || selected && selected.length)), \"`defaultInputValue` will be overridden by the value from `\" + name + \"`.\");\n}\nexport function defaultSelectedType(props, propName, componentName) {\n  var defaultSelected = props.defaultSelected,\n      multiple = props.multiple;\n  warn(multiple || defaultSelected.length <= 1, 'You are passing multiple options to the `defaultSelected` prop of a ' + 'Typeahead in single-select mode. The selections will be truncated to a ' + 'single selection.');\n}\nexport function highlightOnlyResultType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      highlightOnlyResult = props.highlightOnlyResult;\n  warn(!(highlightOnlyResult && allowNew), '`highlightOnlyResult` will not work with `allowNew`.');\n}\nexport function ignoreDiacriticsType(props, propName, componentName) {\n  var filterBy = props.filterBy,\n      ignoreDiacritics = props.ignoreDiacritics;\n  warn(ignoreDiacritics || typeof filterBy !== 'function', 'Your `filterBy` function will override the `ignoreDiacritics` prop.');\n}\nexport function inputPropsType(props, propName, componentName) {\n  var inputProps = props.inputProps;\n\n  if (!(inputProps && Object.prototype.toString.call(inputProps) === '[object Object]')) {\n    return;\n  } // Blacklisted properties.\n\n\n  INPUT_PROPS_BLACKLIST.forEach(function (_ref) {\n    var alt = _ref.alt,\n        prop = _ref.prop;\n    var msg = alt ? \" Use the top-level `\" + alt + \"` prop instead.\" : null;\n    warn(!inputProps[prop], \"The `\" + prop + \"` property of `inputProps` will be ignored.\" + msg);\n  });\n}\nexport function isRequiredForA11y(props, propName, componentName) {\n  warn(props[propName] != null, \"The prop `\" + propName + \"` is required to make `\" + componentName + \"` \" + 'accessible for users of assistive technologies such as screen readers.');\n}\nexport function labelKeyType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey;\n  warn(!(isFunction(labelKey) && allowNew), '`labelKey` must be a string when `allowNew={true}`.');\n}\nexport var optionType = PropTypes.oneOfType([PropTypes.object, PropTypes.string]);\nexport function selectedType(props, propName, componentName) {\n  var multiple = props.multiple,\n      onChange = props.onChange,\n      selected = props.selected;\n  warn(multiple || !selected || selected.length <= 1, 'You are passing multiple options to the `selected` prop of a Typeahead ' + 'in single-select mode. This may lead to unexpected behaviors or errors.');\n  warn(!selected || selected && isFunction(onChange), 'You provided a `selected` prop without an `onChange` handler. If you ' + 'want the typeahead to be uncontrolled, use `defaultSelected`. ' + 'Otherwise, set `onChange`.');\n}","map":{"version":3,"sources":["C:/Users/jayce/Documents/movie_db/movie_db/node_modules/react-bootstrap-typeahead/es/propTypes.js"],"names":["PropTypes","isFunction","values","warn","SIZE","INPUT_PROPS_BLACKLIST","alt","prop","sizeType","oneOf","checkPropType","validator","callback","props","propName","componentName","_PropTypes$checkPropT","checkPropTypes","caseSensitiveType","caseSensitive","filterBy","deprecated","reason","_PropTypes$checkPropT2","defaultInputValueType","defaultInputValue","defaultSelected","multiple","selected","name","length","defaultSelectedType","highlightOnlyResultType","allowNew","highlightOnlyResult","ignoreDiacriticsType","ignoreDiacritics","inputPropsType","inputProps","Object","prototype","toString","call","forEach","_ref","msg","isRequiredForA11y","labelKeyType","labelKey","optionType","oneOfType","object","string","selectedType","onChange"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { isFunction, values, warn } from './utils';\nimport { SIZE } from './constants';\nvar INPUT_PROPS_BLACKLIST = [{\n  alt: 'onBlur',\n  prop: 'onBlur'\n}, {\n  alt: 'onInputChange',\n  prop: 'onChange'\n}, {\n  alt: 'onFocus',\n  prop: 'onFocus'\n}, {\n  alt: 'onKeyDown',\n  prop: 'onKeyDown'\n}];\nexport var sizeType = PropTypes.oneOf(values(SIZE));\n/**\n * Allows additional warnings or messaging related to prop validation.\n */\n\nexport function checkPropType(validator, callback) {\n  return function (props, propName, componentName) {\n    var _PropTypes$checkPropT;\n\n    PropTypes.checkPropTypes((_PropTypes$checkPropT = {}, _PropTypes$checkPropT[propName] = validator, _PropTypes$checkPropT), props, 'prop', componentName);\n    isFunction(callback) && callback(props, propName, componentName);\n  };\n}\nexport function caseSensitiveType(props, propName, componentName) {\n  var caseSensitive = props.caseSensitive,\n      filterBy = props.filterBy;\n  warn(!caseSensitive || typeof filterBy !== 'function', 'Your `filterBy` function will override the `caseSensitive` prop.');\n}\nexport function deprecated(validator, reason) {\n  return function (props, propName, componentName) {\n    var _PropTypes$checkPropT2;\n\n    if (props[propName] != null) {\n      warn(false, \"The `\" + propName + \"` prop is deprecated. \" + reason);\n    }\n\n    return PropTypes.checkPropTypes((_PropTypes$checkPropT2 = {}, _PropTypes$checkPropT2[propName] = validator, _PropTypes$checkPropT2), props, 'prop', componentName);\n  };\n}\nexport function defaultInputValueType(props, propName, componentName) {\n  var defaultInputValue = props.defaultInputValue,\n      defaultSelected = props.defaultSelected,\n      multiple = props.multiple,\n      selected = props.selected;\n  var name = defaultSelected.length ? 'defaultSelected' : 'selected';\n  warn(!(!multiple && defaultInputValue && (defaultSelected.length || selected && selected.length)), \"`defaultInputValue` will be overridden by the value from `\" + name + \"`.\");\n}\nexport function defaultSelectedType(props, propName, componentName) {\n  var defaultSelected = props.defaultSelected,\n      multiple = props.multiple;\n  warn(multiple || defaultSelected.length <= 1, 'You are passing multiple options to the `defaultSelected` prop of a ' + 'Typeahead in single-select mode. The selections will be truncated to a ' + 'single selection.');\n}\nexport function highlightOnlyResultType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      highlightOnlyResult = props.highlightOnlyResult;\n  warn(!(highlightOnlyResult && allowNew), '`highlightOnlyResult` will not work with `allowNew`.');\n}\nexport function ignoreDiacriticsType(props, propName, componentName) {\n  var filterBy = props.filterBy,\n      ignoreDiacritics = props.ignoreDiacritics;\n  warn(ignoreDiacritics || typeof filterBy !== 'function', 'Your `filterBy` function will override the `ignoreDiacritics` prop.');\n}\nexport function inputPropsType(props, propName, componentName) {\n  var inputProps = props.inputProps;\n\n  if (!(inputProps && Object.prototype.toString.call(inputProps) === '[object Object]')) {\n    return;\n  } // Blacklisted properties.\n\n\n  INPUT_PROPS_BLACKLIST.forEach(function (_ref) {\n    var alt = _ref.alt,\n        prop = _ref.prop;\n    var msg = alt ? \" Use the top-level `\" + alt + \"` prop instead.\" : null;\n    warn(!inputProps[prop], \"The `\" + prop + \"` property of `inputProps` will be ignored.\" + msg);\n  });\n}\nexport function isRequiredForA11y(props, propName, componentName) {\n  warn(props[propName] != null, \"The prop `\" + propName + \"` is required to make `\" + componentName + \"` \" + 'accessible for users of assistive technologies such as screen readers.');\n}\nexport function labelKeyType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey;\n  warn(!(isFunction(labelKey) && allowNew), '`labelKey` must be a string when `allowNew={true}`.');\n}\nexport var optionType = PropTypes.oneOfType([PropTypes.object, PropTypes.string]);\nexport function selectedType(props, propName, componentName) {\n  var multiple = props.multiple,\n      onChange = props.onChange,\n      selected = props.selected;\n  warn(multiple || !selected || selected.length <= 1, 'You are passing multiple options to the `selected` prop of a Typeahead ' + 'in single-select mode. This may lead to unexpected behaviors or errors.');\n  warn(!selected || selected && isFunction(onChange), 'You provided a `selected` prop without an `onChange` handler. If you ' + 'want the typeahead to be uncontrolled, use `defaultSelected`. ' + 'Otherwise, set `onChange`.');\n}"]},"metadata":{},"sourceType":"module"}